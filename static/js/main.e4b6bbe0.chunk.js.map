{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","details","id","name","email","Cardlist","cardsArray","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAceA,EAZF,SAACC,GACV,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,cACpB,gCACI,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,eCSnBC,EAdE,SAAC,GAAgB,IACxBC,EADuB,EAAbC,OACUC,KAAI,SAACC,EAAMC,GACjC,OAAQ,cAAC,EAAD,CAEAT,QAASQ,GADHC,MAIlB,OACI,8BACMJ,KCCCK,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKd,UAAU,MAAf,SACI,uBAAOe,KAAK,SACZC,YAAY,eACZhB,UAAU,mCACViB,SAAYH,OCITI,EAVA,SAACnB,GACZ,OACI,qBAAKoB,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAApE,SAIKvB,EAAMwB,YC8CJC,G,wDA/CX,aAAe,IAAD,8BACV,gBAmBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAnB1C,EAAKC,MAAQ,CACTtB,OAAQ,GACRmB,YAAa,IAJP,E,2MAWiBI,MAAM,8C,cAAvBC,E,gBACcA,EAASC,O,OAAvBC,E,OACNC,KAAKT,SAAS,CAAClB,OAAQ0B,I,4MAerB,IAAD,EAC2BC,KAAKL,MAA7BtB,EADH,EACGA,OAAQmB,EADX,EACWA,YACVS,EAAiB5B,EAAO6B,QAAO,SAAAC,GACjC,OAAOA,EAAMlC,KAAKmC,cAAcC,SAASb,EAAYY,kBAEzD,OAAKJ,KAAKL,MAAMtB,OAAOiC,OAIvB,sBAAK1C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWc,aAAcsB,KAAKX,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUhB,OAAQ4B,SAPd,6C,GAnCFM,c,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e4b6bbe0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    return (\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n            <img alt=\"robot\" src={`https://robohash.org/${props.details.id}?200x200`} />\n            <div>\n                <h2>{props.details.name}</h2>\n                <p>{props.details.email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst Cardlist = ({ robots }) => {\n    const cardsArray = robots.map((user, i) => {\n        return (<Card \n                key={ i } \n                details={user}\n                />);\n    })\n    return (\n        <div>\n            { cardsArray }\n        </div> \n    );\n}\n\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input type='search' \n            placeholder='search robot' \n            className='pa3 ba b--green bg-lightest-blue'\n            onChange = {searchChange}\n            />\n        </div>\n    )\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: '2px solid black', height: '800px'}}>\n            {/* We can add inline css in react using { {css} } \n            where the outer brackets denotes it is a javascript expression \n            and inner brackets denotes it's an object */}\n            {props.children}\n        </div>\n    )\n}\nexport default Scroll;","import React, { Component } from 'react';\nimport Cardlist from '../Components/Cardlist';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport './App.css'\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: '',\n            // filteredRobots: robots\n        }\n    }\n\n    async componentDidMount(){\n        try{\n            const response = await fetch('https://jsonplaceholder.typicode.com/users'); \n            const users = await response.json();\n            this.setState({robots: users});\n        }\n        catch(err){\n            throw err;\n        }\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n        // const filteredRobots = this.state.robots.filter(robot => {\n        //     return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        // })\n        // this.setState( { filteredRobots: filteredRobots} )\n    } \n\n    render() {\n        const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n        if (!this.state.robots.length){\n            return (<h1>Loading</h1>)\n        }\n        return (\n        <div className='tc'>\n            <h1 className='f1'>RoboFriends</h1>\n            <SearchBox searchChange={this.onSearchChange} />\n            <Scroll>\n                <Cardlist robots={filteredRobots} />\n            </Scroll>\n        </div>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}